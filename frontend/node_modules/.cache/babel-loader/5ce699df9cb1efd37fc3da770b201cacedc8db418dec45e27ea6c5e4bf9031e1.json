{"ast":null,"code":"var _jsxFileName = \"/home/roddy/Desktop/Notes-App/mynotes/src/pages/NotePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\n// import notes from '../assets/data'\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NotesListPage() {\n  _s();\n  // let note = notes.find(note => note.id === Number({id}.id))\n  // console.log(`${id}`);\n  let {\n    id\n  } = useParams();\n  let noteId = {\n    id\n  }.id;\n  let [note, setNote] = useState(null);\n  useEffect(() => {\n    getNote();\n  }, [noteId]);\n  let getNote = async () => {\n    if (noteID === 'new') return;\n    let response = await fetch(`http://localhost:8000/notes/${noteId}`);\n    let data = await response.json();\n    setNote(data);\n  };\n  let createNote = async () => {\n    await fetch(`http://localhost:8000/notes/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        note\n      })\n    });\n  };\n  let updateNote = async () => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...note,\n        'updated': new Date()\n      })\n    });\n  };\n  let deleteNote = async () => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        note\n      })\n    });\n  };\n  let handleSubmit = () => {\n    if (noteId !== 'new' && !note.body) {\n      deleteNote();\n    } else if (noteId === 'new') {\n      updateNote();\n    } else if (noteId === 'new' && note !== null) {\n      createNote();\n    }\n    updateNote();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteNote,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote({\n          ...note,\n          'body': e.target.value\n        });\n      },\n      value: note === null || note === void 0 ? void 0 : note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(NotesListPage, \"FZmJwUsRzUeEJamifUZk/E/moNU=\", false, function () {\n  return [useParams];\n});\n_c = NotesListPage;\nvar _c;\n$RefreshReg$(_c, \"NotesListPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","ReactComponent","ArrowLeft","jsxDEV","_jsxDEV","NotesListPage","_s","id","noteId","note","setNote","getNote","noteID","response","fetch","data","json","createNote","method","headers","body","JSON","stringify","updateNote","Date","deleteNote","handleSubmit","className","children","to","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/home/roddy/Desktop/Notes-App/mynotes/src/pages/NotePage.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { useParams } from \"react-router-dom\"\n// import notes from '../assets/data'\nimport { Link } from 'react-router-dom'\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\n\nexport default function NotesListPage() {\n    // let note = notes.find(note => note.id === Number({id}.id))\n    // console.log(`${id}`);\n    let { id } = useParams();\n    let noteId = {id}.id\n\n    let [note, setNote] = useState(null)\n\n    useEffect(() => {\n        getNote()   \n    }, [noteId])\n\n    let getNote = async() => {\n        if (noteID === 'new') return\n        let response = await fetch(`http://localhost:8000/notes/${noteId}`)\n        let data = await response.json()\n        setNote(data)\n    }\n    \n\n    let createNote = async () => {\n        await fetch(`http://localhost:8000/notes/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({note})\n    })\n    }\n\n    let updateNote = async () => {\n        await fetch(`http://localhost:8000/notes/${noteId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ ...note, 'updated': new Date() })\n    })\n}\n\n    let deleteNote = async () => {\n        await fetch(`http://localhost:8000/notes/${noteId}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({note})\n    })\n    }\n\n    let handleSubmit = () => {\n\n        if(noteId !== 'new' && !note.body) {\n            deleteNote()\n        } else if (noteId === 'new') {\n            updateNote()\n        } else if (noteId === 'new' && note !== null) {\n            createNote()\n        }\n\n        updateNote()\n    }\n\n    return(\n        <div className=\"note\">\n            <div className=\"note-header\">\n                <h3>\n                    <Link to=\"/\">\n                        <ArrowLeft onClick={handleSubmit} />\n                    </Link>\n                </h3>\n\n                <Link to=\"/\">\n                    <button onClick={deleteNote}>Delete</button>\n                </Link>\n            </div>\n            <textarea onChange={(e) => {setNote({...note, 'body': e.target.value})}} value={note?.body}>\n                </textarea>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}